#!/usr/bin/env python3
"""
IDOR (Insecure Direct Object Reference) Vulnerability Demonstration Script
==========================================================================

This script demonstrates IDOR vulnerabilities for Amazon Application Security Engineer interviews.
It shows both vulnerable patterns and secure implementations for educational purposes.

Usage: python idor-vulnerability-demo.py [options]

DEFENSIVE PURPOSE ONLY - For security analysis and training
"""

import requests
import json
import argparse
import sys
import time
from urllib.parse import urlparse
import threading

class IDORAnalyzer:
    def __init__(self, base_url, session_token=None):
        self.base_url = base_url.rstrip('/')
        self.session = requests.Session()
        if session_token:
            self.session.headers.update({'Authorization': f'Bearer {session_token}'})
        self.findings = []
        
    def analyze_endpoint(self, endpoint_path, object_ids, user_context=None):
        """
        Analyze an endpoint for IDOR vulnerabilities
        
        Args:
            endpoint_path (str): API endpoint path with {id} placeholder
            object_ids (list): List of object IDs to test
            user_context (dict): User context for authorization testing
        """
        print(f"\n[INFO] Analyzing endpoint: {endpoint_path}")
        
        for object_id in object_ids:
            url = f"{self.base_url}{endpoint_path}".replace('{id}', str(object_id))
            
            try:
                response = self.session.get(url)
                
                finding = {
                    'endpoint': endpoint_path,
                    'object_id': object_id,
                    'status_code': response.status_code,
                    'response_size': len(response.content),
                    'timestamp': time.time()
                }
                
                if response.status_code == 200:
                    # Check for sensitive data exposure
                    if self._contains_sensitive_data(response.text):
                        finding['severity'] = 'HIGH'
                        finding['description'] = 'IDOR vulnerability: Unauthorized access to sensitive data'
                    else:
                        finding['severity'] = 'MEDIUM'
                        finding['description'] = 'IDOR vulnerability: Unauthorized access to resource'
                elif response.status_code == 403:
                    finding['severity'] = 'INFO'
                    finding['description'] = 'Access properly restricted'
                elif response.status_code == 404:
                    finding['severity'] = 'INFO'
                    finding['description'] = 'Resource not found (expected behavior)'
                else:
                    finding['severity'] = 'LOW'
                    finding['description'] = f'Unexpected response: {response.status_code}'
                
                self.findings.append(finding)
                print(f"  ID {object_id}: {response.status_code} ({finding['severity']})")
                
                # Rate limiting to avoid overwhelming target
                time.sleep(0.5)
                
            except requests.RequestException as e:
                print(f"  ID {object_id}: Error - {e}")
    
    def _contains_sensitive_data(self, response_text):
        """Check if response contains sensitive data patterns"""
        sensitive_patterns = [
            'ssn', 'social', 'credit_card', 'password', 'email',
            'phone', 'address', 'birth_date', 'salary'
        ]
        
        response_lower = response_text.lower()
        return any(pattern in response_lower for pattern in sensitive_patterns)
    
    def test_horizontal_privilege_escalation(self, endpoint, current_user_id, target_user_ids):
        """Test if current user can access other users' resources"""
        print(f"\n[INFO] Testing horizontal privilege escalation on {endpoint}")
        
        for target_id in target_user_ids:
            if target_id != current_user_id:
                self.analyze_endpoint(endpoint, [target_id])
    
    def test_vertical_privilege_escalation(self, admin_endpoints, user_token):
        """Test if regular user can access admin functions"""
        print(f"\n[INFO] Testing vertical privilege escalation")
        
        # Temporarily use user token
        original_auth = self.session.headers.get('Authorization')
        self.session.headers.update({'Authorization': f'Bearer {user_token}'})
        
        for endpoint in admin_endpoints:
            try:
                url = f"{self.base_url}{endpoint}"
                response = self.session.get(url)
                
                if response.status_code == 200:
                    print(f"  CRITICAL: User can access admin endpoint {endpoint}")
                elif response.status_code == 403:
                    print(f"  SECURE: Access to {endpoint} properly restricted")
                else:
                    print(f"  INFO: {endpoint} returned {response.status_code}")
                    
            except requests.RequestException as e:
                print(f"  ERROR: {endpoint} - {e}")
        
        # Restore original authentication
        if original_auth:
            self.session.headers.update({'Authorization': original_auth})
        else:
            self.session.headers.pop('Authorization', None)
    
    def generate_report(self):
        """Generate vulnerability report"""
        if not self.findings:
            print("\n[INFO] No findings to report")
            return
        
        high_severity = [f for f in self.findings if f['severity'] == 'HIGH']
        medium_severity = [f for f in self.findings if f['severity'] == 'MEDIUM']
        
        print("\n" + "="*60)
        print("IDOR VULNERABILITY ASSESSMENT REPORT")
        print("="*60)
        
        print(f"\nSUMMARY:")
        print(f"  High Severity: {len(high_severity)} findings")
        print(f"  Medium Severity: {len(medium_severity)} findings")
        print(f"  Total Tested: {len(self.findings)} endpoints")
        
        if high_severity:
            print(f"\nHIGH SEVERITY FINDINGS:")
            for finding in high_severity:
                print(f"  • {finding['endpoint']} (ID: {finding['object_id']})")
                print(f"    {finding['description']}")
        
        if medium_severity:
            print(f"\nMEDIUM SEVERITY FINDINGS:")
            for finding in medium_severity:
                print(f"  • {finding['endpoint']} (ID: {finding['object_id']})")
                print(f"    {finding['description']}")
        
        print(f"\nREMEDIATION RECOMMENDATIONS:")
        print(f"  1. Implement proper authorization checks for all object access")
        print(f"  2. Use session-based or context-aware access control")
        print(f"  3. Validate user permissions before returning sensitive data")
        print(f"  4. Implement object-level permissions rather than just endpoint-level")
        print(f"  5. Add audit logging for all object access attempts")


def demo_vulnerable_patterns():
    """Demonstrate common vulnerable patterns for educational purposes"""
    print("\n" + "="*60)
    print("COMMON IDOR VULNERABILITY PATTERNS")
    print("="*60)
    
    vulnerable_examples = [
        {
            'pattern': 'Sequential ID enumeration',
            'endpoint': '/api/users/{id}',
            'description': 'Predictable IDs allow enumeration of all user profiles',
            'example_ids': [1, 2, 3, 100, 1000]
        },
        {
            'pattern': 'Direct database ID exposure',
            'endpoint': '/api/documents/{id}',
            'description': 'Database primary keys exposed directly in URLs',
            'example_ids': [1, 25, 100, 999]
        },
        {
            'pattern': 'Insufficient authorization',
            'endpoint': '/api/orders/{id}',
            'description': 'Authorization checks missing or inadequate',
            'example_ids': [12345, 12346, 12347]
        }
    ]
    
    for example in vulnerable_examples:
        print(f"\nPATTERN: {example['pattern']}")
        print(f"Endpoint: {example['endpoint']}")
        print(f"Risk: {example['description']}")
        print(f"Test IDs: {example['example_ids']}")


def demo_secure_implementations():
    """Show secure implementation patterns"""
    print("\n" + "="*60)
    print("SECURE IMPLEMENTATION PATTERNS")
    print("="*60)
    
    secure_patterns = [
        {
            'pattern': 'UUID-based identifiers',
            'description': 'Use non-sequential, cryptographically random UUIDs',
            'example': 'GET /api/users/550e8400-e29b-41d4-a716-446655440000'
        },
        {
            'pattern': 'Context-aware access control',
            'description': 'Verify user owns or has permission to access resource',
            'example': 'Check if user_id matches resource owner or has explicit permission'
        },
        {
            'pattern': 'Indirect object references',
            'description': 'Use session-specific mappings instead of direct IDs',
            'example': 'Map session tokens to allowed resource lists'
        }
    ]
    
    for pattern in secure_patterns:
        print(f"\nSECURE PATTERN: {pattern['pattern']}")
        print(f"Implementation: {pattern['description']}")
        print(f"Example: {pattern['example']}")


def main():
    parser = argparse.ArgumentParser(description='IDOR Vulnerability Analysis Tool')
    parser.add_argument('--target', help='Target base URL (e.g., https://api.example.com)')
    parser.add_argument('--endpoint', help='Endpoint pattern with {id} placeholder')
    parser.add_argument('--ids', help='Comma-separated list of IDs to test')
    parser.add_argument('--token', help='Authentication token')
    parser.add_argument('--demo', action='store_true', help='Show vulnerability patterns only')
    
    args = parser.parse_args()
    
    if args.demo or not args.target:
        demo_vulnerable_patterns()
        demo_secure_implementations()
        
        print(f"\n" + "="*60)
        print("AMAZON INTERVIEW PREPARATION NOTES")
        print("="*60)
        print(f"When discussing IDOR vulnerabilities in interviews:")
        print(f"1. Explain the business impact (unauthorized data access)")
        print(f"2. Demonstrate systematic discovery methodology")
        print(f"3. Show understanding of scale considerations")
        print(f"4. Propose comprehensive remediation strategies")
        print(f"5. Connect to customer trust and regulatory compliance")
        return
    
    # Validate target URL
    parsed_url = urlparse(args.target)
    if not parsed_url.scheme or not parsed_url.netloc:
        print("Error: Invalid target URL")
        return
    
    print(f"IDOR Analysis for: {args.target}")
    print(f"Endpoint: {args.endpoint}")
    
    analyzer = IDORAnalyzer(args.target, args.token)
    
    if args.endpoint and args.ids:
        object_ids = [int(id.strip()) for id in args.ids.split(',')]
        analyzer.analyze_endpoint(args.endpoint, object_ids)
    else:
        # Default test patterns
        test_endpoints = [
            '/api/users/{id}',
            '/api/documents/{id}',
            '/api/orders/{id}'
        ]
        
        test_ids = [1, 2, 3, 10, 100, 1000]
        
        for endpoint in test_endpoints:
            analyzer.analyze_endpoint(endpoint, test_ids)
    
    analyzer.generate_report()


if __name__ == '__main__':
    main()